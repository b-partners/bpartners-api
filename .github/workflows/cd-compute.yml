name: CD Compute

on:
  push:
    branches:
      - 'prod'
      - 'preprod'

  workflow_dispatch:
    inputs:
      run_tests:
        type: boolean
        required: false
        default: true

  workflow_call:
    inputs:
      run_tests:
        type: boolean
        required: false
        default: true

env:
  ECR_REPOSITORY: bpartners-api-latest
  NAME_PREFIX: ''

jobs:
  run_tests:
    if: github.event.inputs.run_tests != 'false' && github.event_name != 'schedule' && github.ref_name == 'prod' || github.event.inputs.run_tests != 'false' && github.event_name != 'schedule' && github.ref_name == 'preprod'
    runs-on: ubuntu-latest
    steps:
      - name: Run tests
        uses: ./.github/workflows/ci.yml

  deploy-stack:
    needs: run_tests
    if: github.ref_name == 'prod' || github.ref_name == 'prod-private-url' || github.ref_name == 'preprod' || github.ref_name == 'preprod-private-url'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: From gradle.properties to version.yml
        run: |
          cp gradle.properties version.yml
          sed -i 's/=/: /g' version.yml

      - name: Read semantic version (needed by the docker image build)
        id: read-semver
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: version.yml
          version: version

      - run: ./gradlew build -x test

      - name: Install aws-cli
        uses: unfor19/install-aws-cli-action@v1.0.3
        with:
          version: 2
          verbose: false
          arch: amd64
          rootdir: ''
          workdir: ''

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up crendetials for private ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag and push Docker image to AWS private ECR (continue-on-error)
        # Assume dev and prod point to the same commit.
        # Assume dev finished publishing the (immutable) image.
        # In such a case, prod publication will end in an error since image already exists:
        # Ignore the error and pursue to stack update.
        continue-on-error: true
        env:
          ECR_PRIVATE_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg version=${{ steps.read-semver.outputs.version }} \
            -t $ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Put branch_env into GITHUB_ENV
        run: |
          if ${{ github.ref_name == 'preprod' || github.ref_name == 'preprod-private-url' }}; then
            echo "branch_env=preprod" >> $GITHUB_ENV
          elif ${{ github.ref_name == 'prod' || github.ref_name == 'prod-private-url' }}; then
            echo "branch_env=prod" >> $GITHUB_ENV
          else
            echo "branch_env=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Get configurations from ecs-conf.yml
        id: get-configuration
        uses: CumulusDS/get-yaml-paths-action@v1.0.1
        with:
          file: ecs-conf.yml
          vCpu: envs.${{ env.branch_env }}.vCpu
          memory: envs.${{ env.branch_env }}.memory
          tasksDesiredCount: envs.${{ env.branch_env }}.tasksDesiredCount
          listenerRuleAvailablePriority: envs.${{ env.branch_env }}.listenerRuleAvailablePriority

      - name: Put outputs from get-configuration step into GITHUB_ENV
        run: |
          echo "vCpu=${{ steps.get-configuration.outputs.vCpu}}" >> $GITHUB_ENV
          echo "memory=${{ steps.get-configuration.outputs.memory}}" >> $GITHUB_ENV
          echo "tasksDesiredCount=${{ steps.get-configuration.outputs.tasksDesiredCount}}" >> $GITHUB_ENV
          echo "listenerRuleAvailablePriority=${{ steps.get-configuration.outputs.listenerRuleAvailablePriority}}" >> $GITHUB_ENV

      - name: Get oldest RDS snapshot
        id: oldestSnapshot
        run: |
          oldest_snapshot=$(aws rds describe-db-snapshots --region eu-west-3 --snapshot-type manual | jq -r '.DBSnapshots | sort_by(.SnapshotCreateTime)[0].DBSnapshotIdentifier')
          echo "::set-output name=oldest_snapshot::$oldest_snapshot"

      - name: Delete RDS snapshot
        run: |
          aws rds delete-db-snapshot --db-snapshot-identifier ${{ steps.oldestSnapshot.outputs.oldest_snapshot }}

      - name: Retrieve Database identifier from Parameter Store and set it as Env
        run: |
          aws configure set default.output text
          echo "dbIdentifier=$(aws ssm get-parameter --name /bpartners/${{ env.branch_env }}/db/identifier --query "Parameter.Value" | grep -o '^[^.]*')" >> $GITHUB_ENV

      - name: Get Time
        id: current-time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 3
          format: 'YYYY-MM-DD-HH-mm-ss'

      - name: Set time as env
        run: echo "time=${{ steps.current-time.outputs.time }}" >> $GITHUB_ENV

      - name: Create snapshot for the actual version of the database
        run: aws rds create-db-snapshot --db-instance-identifier ${{ env.dbIdentifier }} --db-snapshot-identifier ${{ env.branch_env }}-snapshot-pre-cd-compute-${{ github.sha }}-${{ env.time }}

      - name: Deploy compute stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        if: github.ref_name != 'prod-private-url' && github.ref_name != 'preprod-private-url'
        with:
          name: ${{ env.branch_env }}-compute-bpartners
          template: cf-stacks/compute-stack.yml
          tags: "[ { \"Key\": \"app\", \"Value\": \"bpartners\" }, { \"Key\": \"env\", \"Value\": \"${{ env.branch_env }}\" } ]"
          capabilities: CAPABILITY_NAMED_IAM
          no-fail-on-empty-changeset: "1"
          parameter-overrides:
            "Env=${{ env.branch_env }},
            NamePrefix=${{ env.NAME_PREFIX }},
            ListenerRuleAvailablePriority=${{ env.listenerRuleAvailablePriority }},
            Image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},
            Cpu=${{ env.vCpu }}, Memory=${{ env.memory }}, TasksDesiredCount=${{ env.tasksDesiredCount }}"
