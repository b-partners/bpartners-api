name: CD

on:
  push:
    branches:
      - 'dev'
      - 'prod'
  workflow_dispatch:

jobs:
  cd:
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/prod'

    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-3
      ECR_REPOSITORY: bpartners-api-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: From gradle.properties to version.yml
        run: |
          cp gradle.properties version.yml
          sed -i 's/=/: /g' version.yml
      - name: Read semantic version (needed by the docker image build)
        id: read-semver
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: version.yml
          version: version

      - name: Build Gradle project
        run: |
          export TEST_USER_IDTOKEN=${{ secrets.TEST_USER_IDTOKEN }}
          ./gradlew build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set up crendetials for private ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2
      - name: Build, tag and push Docker image to AWS private ECR (continue-on-error)
        # Assume dev and prod point to the same commit.
        # Assume dev finished publishing the (immutable) image.
        # In such a case, prod publication will end in an error since image already exists:
        # Ignore the error and pursue to stack update.
        continue-on-error: true
        env:
          ECR_PRIVATE_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg version=${{ steps.read-semver.outputs.version }} \
            -t $ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_PRIVATE_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
      - name: Put branch_env and listenerRuleAvailablePriority into GITHUB_ENV
        run: |
          if ${{ github.ref == 'refs/heads/dev' }}; then
            echo "branch_env=dev" >> $GITHUB_ENV
            echo "listenerRuleAvailablePriority=1" >> $GITHUB_ENV
          elif ${{ github.ref == 'refs/heads/prod' }}; then
            echo "branch_env=prod" >> $GITHUB_ENV
            echo "listenerRuleAvailablePriority=10" >> $GITHUB_ENV
          fi
      - name: Deploy with AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.branch_env }}-bpartners-api
          template: cloudformation-stack.yml
          tags: "[ { \"Key\": \"app\", \"Value\": \"api\" }, { \"Key\": \"env\", \"Value\": \"${{ env.branch_env }}\" } ]"
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides:
            "Env=${{ env.branch_env }},
            ListenerRuleAvailablePriority=${{ env.listenerRuleAvailablePriority }},
            Image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
