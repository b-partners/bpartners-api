name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

env:
  ADS_DENOM_CHAR: e

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_TOKEN }}
          ec2-image-id: ami-0baf90fd7c825b787
          ec2-instance-type: c6g.16xlarge
          subnet-id: ${{ secrets.AWS_VPC_PUBLIC_SUBNET }}
          security-group-id: ${{ secrets.AWS_VPC_SG }}
          aws-resource-tags: >
            [
              {"Key": "app", "Value": "bpartners"},
              {"Key": "env", "Value": "${{ github.ref_name }}"}
            ]

  quality:
    name: Run quality check
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # no shallow clone for better relevancy of Sonar analysis

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-maven-${{ hashFiles('**/build.gradle', '**/api.yml') }}
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Jacoco test coverage
        run: |
          export DEV_USER_ACCESS_TOKEN=${{ secrets.DEV_USER_ACCESS_TOKEN }}
          export SWAN_CLIENT_ID=${{ secrets.SWAN_CLIENT_ID }}
          export SWAN_CLIENT_SECRET=${{ secrets.SWAN_CLIENT_SECRET }}
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export ADS_BASEURL=${{ secrets.ADS_BASEURL}}
          export ADS_BEARER=${{ secrets.ADS_BEARER }}
          export ADS_DENOM_CHAR=${{ env.ADS_DENOM_CHAR }}
          export BRIDGE_CLIENT_ID=${{ secrets.BRIDGE_CLIENT_ID }}
          export BRIDGE_CLIENT_SECRET=${{ secrets.BRIDGE_CLIENT_SECRET }}
          export BRIDGE_BASE_URL=${{ secrets.BRIDGE_BASE_URL }}
          export BRIDGE_VERSION=${{ secrets.BRIDGE_VERSION }}
          export BAN_BASE_URL=${{ secrets.BAN_BASE_URL }}
          ./gradlew test

      - name: Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest

      - name: Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew sonarqube --info \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=bpartners \
            -Dsonar.projectKey=bpartners-api \
            -Dsonar.coverage.exclusions=**/gen/** \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.java.checkstyle.reportPaths=build/reports/checkstyle/main.xml,build/reports/checkstyle/test.xml

  stop-runner:
    name: Stop self-hosted EC2 Runner
    runs-on: ubuntu-latest
    needs:
      - start-runner
      - quality
    if: ${{ always() }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}