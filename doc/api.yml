openapi: 3.0.3
info:
  version: '1.0'
  title: BPartners API
servers:
  - url: 'https://api-dev.bpartners.app'
security:
  - BearerAuth: [ ]
paths:
  /ping:
    get:
      tags:
        - Security
      summary: pong
      operationId: ping
      security: [ ] # No security
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
          required: true
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
          required: true
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getUserById
      responses:
        '200':
          description: The identified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /pre-registration:
    get:
      tags:
        - Pre-registration
      summary: Get all pre-registration.
      operationId: getPreRegistrations
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
          required: true
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
          required: true
      responses:
        '200':
          description: List of pre-registered users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PreRegistration'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Pre-registration
      summary: Pre-register a user.
      operationId: createPreRegistration
      security: [ ] #no security
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePreRegistration'
      responses:
        200:
          description: Pre-registered user created!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreRegistration'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /accounts:
    get:
      tags:
        - Users
      summary: Get all accounts
      operationId: getAccounts
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
          required: true
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
          required: true
      responses:
        '200':
          description: List of accounts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /accounts/{id}:
    get:
      tags:
        - Users
      summary: Get account by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getAccountById
      responses:
        '200':
          description: The identified account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/SwanUser'
      properties:
        id:
          type: string
          example: 'uuid'
        monthlySubscription:
          type: integer
          default: 5
        status:
          $ref: '#/components/schemas/EnableStatus'
    Account:
      allOf:
        - $ref: '#/components/schemas/SwanAccount'
      properties:
        id:
          type: string
          example: 'uuid'
        user_id:
          type: string
          example: 'uuid'
    SwanUser:
      type: object
      properties:
        id:
          type: string
          example: 'uuid'
        first_name:
          type: string
          example: 'John'
        last_name:
          type: string
          example: 'Doe'
        birth_date:
          type: string
          format: date
        idVerified:
          type: boolean
        identificationStatus:
          type: string
          example: 'ValidIdentity'
        nationalityCCA3:
          type: string
          example: 'FRA'
        mobilePhoneNumber:
          type: string
          example: "+33 1 23 45 67 89"
    SwanAccount:
      properties:
        swan_id:
          type: integer
        name:
          type: string
    EnableStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    Whoami:
      properties:
        id_user:
          type: string
        id_token:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string
    CreatePreRegistration:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        society:
          type: string
        email:
          type: string
          example: username@domain.com
        phone_number:
          type: string
    PreRegistration:
      allOf:
        - $ref: '#/components/schemas/CreatePreRegistration'
      type: object
      properties:
        id:
          type: string
        entranceDatetime:
          type: string
          format: date-time
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error