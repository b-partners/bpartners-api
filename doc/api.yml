openapi: 3.0.3
info:
  version: 'latest'
  title: BPartners API
servers:
  - url: https://api-dev.bpartners.app
security:
  - BearerAuth: [ ]

paths:
  /ping:
    get:
      tags:
        - Security
      summary: pong
      operationId: ping
      security: [ ]
      description: Check server health
      responses:
        200:
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        500:
          $ref: '#/components/responses/500'
  /authInitiation:
    post:
      tags:
        - Security
      summary: Initiate an authentication process
      operationId: initiateAuth
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthInitiation'
        required: true
      responses:
        200:
          description: A redirection URL where to initiate authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirection'
        400:
          $ref: '#/components/schemas/BadRequestException'
        500:
          $ref: '#/components/schemas/InternalServerException'
  /token:
    post:
      tags:
        - Security
      summary: Create a new access token and corresponding refresh token
      operationId: createToken
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToken'
        required: true
      responses:
        200:
          description: The generated token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          $ref: '#/components/schemas/BadRequestException'
        500:
          $ref: '#/components/schemas/InternalServerException'
  /onboardingInitiation:
    post:
      tags:
        - Onboarding
      summary: Initiate an onboarding process
      operationId: initiateOnboarding
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnboardingInitiation'
        required: true
      responses:
        200:
          description: A redirection component where to initiate onboarding
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Redirection'
        500:
          $ref: '#/components/responses/500'
  /whoami:
    get:
      tags:
        - Security
      summary: Who Am I? Tells you who you are
      operationId: whoami
      responses:
        200:
          description: Who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /users/{id}:
    get:
      tags:
        - User Accounts
      summary: Get a user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /preUsers:
    post:
      tags:
        - Onboarding
      security: [ ]
      summary: Pre-onboard users
      operationId: createPreUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreatePreUser'
      responses:
        200:
          description: User is pre-onboarded!
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PreUser'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /users/{id}/accounts:
    get:
      tags:
        - User Accounts
      summary: Get accounts of a user
      operationId: getAccountsByUserId
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: List of accounts for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /users/{userId}/accounts/{accountId}/accountHolders:
    get:
      tags:
        - User Accounts
      summary: Get accountHolders of an account
      operationId: getAccountHolders
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
        - in: path
          name: accountId
          schema:
            type: string
          required: true
      responses:
        200:
          description: List of accountHolders of an account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountHolder'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{id}/transactions:
    get:
      tags:
        - Paying
      summary: Get transactions of an account
      operationId: getTransactions
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: List of transactions of the account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{aId}/invoiceRelaunchConf:
    get:
      tags:
        - Paying
      summary: Get the current relaunch configuration for invoice
      operationId: getInvoiceRelaunchConf
      parameters:
        - in: path
          name: aId
          description: Account identifier
          schema:
            type: string
          required: true
      responses:
        200:
          description: The invoice relaunching configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceRelaunchConf'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Paying
      summary: Configure the automatic relaunch of all invoices of an account
      operationId: configureRelaunch
      parameters:
        - in: path
          name: aId
          description: Account identifier
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvoiceRelaunchConf'
      responses:
        200:
          description: The invoice relaunch configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceRelaunchConf'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{aId}/transactionCategories:
    get:
      tags:
        - Paying
      summary: Get known transaction categories of an account
      operationId: getTransactionCategories
      description: |
        Can be filter by :
        * unique : show distinct transaction categories
        * userDefined : show transaction categories defined by the user
        * date intervals : give the count of transaction categories used by existing transactions 
        between two dates
      parameters:
        - in: path
          name: aId
          description: Account identifier
          schema:
            type: string
          required: true
        - in: query
          name: unique
          description: If disabled, all transaction categories are given
          schema:
            type: boolean
          required: true
        - in: query
          name: userDefined
          schema:
            type: boolean
        - in: query
          name: from
          schema:
            type: string
            format: date
          required: true
        - in: query
          name: to
          schema:
            type: string
            format: date
          required: true
      responses:
        200:
          description: List of known transaction categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionCategory'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{aId}/transactions/{tId}/transactionCategories:
    post:
      tags:
        - Paying
      summary: Create transaction categories
      operationId: createTransactionCategories
      parameters:
        - in: path
          name: aId
          description: Account identifier
          schema:
            type: string
          required: true
        - in: path
          name: tId
          description: Transaction identifier
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransactionCategory'
      responses:
        200:
          description: List of created transaction categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionCategory'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{id}/products:
    get:
      tags:
        - Paying
      summary: Get known products of the specified account
      operationId: getProducts
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: unique
          description: If description is null, this parameter is required.
          schema:
            type: boolean
        - in: query
          name: description
          schema:
            type: string
          description: Filter product by description
      responses:
        200:
          description: List of known products of the account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{aId}/invoices/{iId}/products:
    post:
      tags:
        - Paying
      operationId: createProducts
      summary: Create products of an invoice
      parameters:
        - in: path
          name: aId
          description: Account identifier
          schema:
            type: string
          required: true
        - in: path
          name: iId
          description: Invoice identifier
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateProduct'
      responses:
        200:
          description: The modified invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{aId}/invoices:
    get:
      tags:
        - Paying
      operationId: getInvoices
      summary: Get known invoices of the specified account
      description: Returned invoices are ordered by created datetime desc.
      parameters:
        - in: path
          name: aId
          schema:
            type: string
          required: true
        - in: query
          name: page
          schema:
            $ref: '#/components/schemas/Page'
        - in: query
          name: pageSize
          schema:
            $ref: '#/components/schemas/PageSize'
        - in: query
          name: status
          description: 'Filter invoices by appropriate status. If null, returns all invoices'
          schema:
            $ref: '#/components/schemas/InvoiceStatus'
      responses:
        200:
          description: The list of invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{aId}/invoices/{iId}:
    put:
      tags:
        - Paying
      summary: Crupdate an invoice
      operationId: crupdateInvoice
      parameters:
        - in: path
          name: aId
          description: Account identifier
          schema:
            type: string
          required: true
        - in: path
          name: iId
          description: Invoice identifier
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CrupdateInvoice'
      responses:
        200:
          description: The crupdated invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
    get:
      tags:
        - Paying
      summary: Get an invoice
      operationId: getInvoiceById
      parameters:
        - in: path
          name: aId
          description: Account identifier
          schema:
            type: string
          required: true
        - in: path
          name: iId
          description: Invoice identifier
          schema:
            type: string
          required: true
      responses:
        200:
          description: The invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{id}/paymentInitiations:
    post:
      tags:
        - Paying
      summary: Initiate payment processes to an account
      operationId: initiatePayments
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PaymentInitiation'
      responses:
        200:
          description: List of redirections where to initiate payments to the account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentRedirection'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'

  /accounts/{aId}/files/{id}:
    get:
      tags:
        - Files
      summary: Get information of a file
      operationId: getFileById
      parameters:
        - in: path
          name: aId
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Information of the file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileInfo'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{id}/customers:
    get:
      tags:
        - Customers
      summary: Get customers of an account
      operationId: getCustomers
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: name
          schema:
            type: string
      responses:
        200:
          description: List of customers of the specified account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
    post:
      tags:
        - Customers
      summary: Create customers for an account
      operationId: createCustomers
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCustomer'
      responses:
        200:
          description: List of customers of the specified account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{aId}/files/{id}/raw:
    get:
      tags:
        - Files
      summary: Download a file
      operationId: downloadFile
      parameters:
        - in: path
          name: aId
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: accessToken
          schema:
            type: string
      responses:
        200:
          description: The file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
    post:
      tags:
        - Files
      summary: Upload a file. Fails if file already exists.
      operationId: uploadFile
      parameters:
        - in: path
          name: aId
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: fileType
          schema:
            type: string
      requestBody:
        required: true
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          application/pdf:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: The crupdated file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /accounts/{id}/marketplaces:
    get:
      tags:
        - Prospecting
      summary: Get marketplaces for an account
      operationId: getMarketplaces
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: List of marketplaces where the account owner can find customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Marketplace'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
      allOf:
        - $ref: '#/components/schemas/CreateCustomer'
    PaymentInitiation:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        reference:
          type: string
        amount:
          type: integer
        payerName:
          type: string
        payerEmail:
          type: string
        redirectionStatusUrls:
          $ref: '#/components/schemas/RedirectionStatusUrls'
    Transaction:
      type: object
      properties:
        id:
          type: string
          example: 'uuid'
        amount:
          type: number
        label:
          type: string
        reference:
          type: string
        paymentDatetime:
          type: string
          format: date-time
        category:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategory'
    TransactionCategory:
      allOf:
        - $ref: '#/components/schemas/CreateTransactionCategory'
      properties:
        id:
          type: string
        userDefined:
          type: boolean
        count:
          type: integer
          format: int64
    CreateTransactionCategory:
      type: object
      properties:
        type:
          type: string
        vat:
          type: integer
    AccountHolder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
    User:
      properties:
        id:
          type: string
          example: 'uuid'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        birthDate:
          type: string
          format: date
        idVerified:
          type: boolean
        identificationStatus:
          type: string
          example: 'ValidIdentity'
        nationalityCCA3:
          type: string
          example: 'FRA'
        phone:
          type: string
          example: "+33 1 23 45 67 89"
        monthlySubscriptionAmount:
          type: integer
        logoFileId:
          type: string
        status:
          $ref: '#/components/schemas/EnableStatus'
    Account:
      properties:
        id:
          type: string
        name:
          type: string
        IBAN:
          type: string
        BIC:
          type: string
    EnableStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    Whoami:
      properties:
        user:
          $ref: '#/components/schemas/User'
    CreatePreUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        society:
          type: string
        email:
          type: string
          example: username@domain.com
        phone:
          type: string
    PreUser:
      allOf:
        - $ref: '#/components/schemas/CreatePreUser'
      type: object
      properties:
        id:
          type: string
        entranceDatetime:
          type: string
          format: date-time
    AuthInitiation:
      type: object
      properties:
        state:
          type: string
        phone:
          type: string
        redirectionStatusUrls:
          $ref: '#/components/schemas/RedirectionStatusUrls'
    OnboardingInitiation:
      type: object
      properties:
        redirectionStatusUrls:
          $ref: '#/components/schemas/RedirectionStatusUrls'
    RedirectionStatusUrls:
      type: object
      properties:
        successUrl:
          type: string
        failureUrl:
          type: string
    Redirection:
      type: object
      properties:
        redirectionUrl:
          type: string
        redirectionStatusUrls:
          $ref: '#/components/schemas/RedirectionStatusUrls'
    PaymentRedirection:
      allOf:
        - $ref: '#/components/schemas/Redirection'
      type: object
      properties:
        id:
          type: string
    CreateToken:
      type: object
      properties:
        code:
          type: string
        redirectionStatusUrls:
          $ref: '#/components/schemas/RedirectionStatusUrls'
    Token:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        whoami:
          $ref: '#/components/schemas/Whoami'
    CrupdateInvoiceTemplate:
      type: object
      properties:
        ref:
          type: string
        title:
          type: string
        comment:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        status:
          $ref: '#/components/schemas/InvoiceStatus'
        sendingDate:
          type: string
          format: date
        toPayAt:
          type: string
          format: date
    CrupdateInvoice:
      allOf:
        - $ref: '#/components/schemas/CrupdateInvoiceTemplate'
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/CreateProduct'
    Invoice:
      allOf:
        - $ref: '#/components/schemas/CrupdateInvoiceTemplate'
      properties:
        id:
          type: string
        paymentUrl:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        totalVat:
          type: integer
        totalPriceWithoutVat:
          type: integer
        totalPriceWithVat:
          type: integer
        status:
          $ref: '#/components/schemas/InvoiceStatus'
        updatedAt:
          type: string
          format: date-time
        fileId:
          type: string
          description: |
            Identifier of the PDF file that is automatically generated for each crupdate.
            Its value is `null` when generation is not finished yet.
    InvoiceStatus:
      type: string
      enum:
        - DRAFT
        - PROPOSAL
        - CONFIRMED
    CreateInvoiceRelaunchConf:
      type: object
      properties:
        unpaidRelaunch:
          type: integer
          description: The frequency of sending the message in days
        draftRelaunch:
          type: integer
          description: The frequency of sending the message in days
    InvoiceRelaunchConf:
      allOf:
        - $ref: '#/components/schemas/CreateInvoiceRelaunchConf'
      properties:
        id:
          type: string
        updatedAt:
          type: string
          format: date-time
    CreateProduct:
      type: object
      properties:
        description:
          type: string
        quantity:
          type: integer
        unitPrice:
          type: integer
        vatPercent:
          type: integer
    Product:
      allOf:
        - $ref: '#/components/schemas/CreateProduct'
      properties:
        id:
          type: string
        totalVat:
          type: integer
        totalPriceWithVat:
          type: integer
    CreateCustomer:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        website:
          type: string
        address:
          type: string
        zipCode:
          type: integer
        city:
          type: string
        country:
          type: string
    FileInfo:
      type: object
      properties:
        id:
          type: string
        uploadedAt:
          type: string
          format: date-time
        uploadedByAccountId:
          type: string
          example: "uuid"
        sizeInKB:
          type: integer
        sha256:
          type: string
    Marketplace:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        phoneNumber:
          type: string
        websiteUrl:
          type: string
        logoUrl:
          type: string
    FileType:
      type: string
      enum:
        - INVOICE
        - LOGO
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
